<?php

namespace App\Models;

use App\Enums\OrderProductState;
use App\Enums\OrderState;
use App\Enums\OutgoingState;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Http;

class OrderProduct extends Model
{
    use HasFactory;

    protected $table = "order_product";

    protected $appends = ["can_refund", "can_review", "delivery_url"];

    protected $fillable = [
        "state",
        "order_id",
        "product_id",
        "delivery_number",
        "delivery_company",
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::updating(function($model){
            $prevDeliveryNumber = $model->getOriginal("delivery_number");

            // 배송중
            if($prevDeliveryNumber == null && $model->delivery_number){
                $model->state = OrderProductState::ONGOING;
            }
        });

        self::updated(function($model){
            $prevState = $model->getOriginal("state");


            // 배송완료
            if($prevState != OrderProductState::DONE && $model->state == OrderProductState::DONE){
                $order = $model->order;

                $user = $order->user;

                $deliveryDone = $order->orderProducts()->where("state","!=", OrderProductState::DONE)->count() == 0;

                if($user && $deliveryDone){
                    // 적립포인트 추가
                    $user->update([
                        "point" => $user->point + $order->point_give
                    ]);
                }
            }

        });
    }

    public function order()
    {
        return $this->belongsTo(Order::class);
    }

    public function product()
    {
        return $this->belongsTo(Product::class);
    }

    public function outgoing()
    {
        return $this->belongsTo(Outgoing::class);
    }

    public function refunds()
    {
        return $this->hasMany(Refund::class);
    }

    public function getCanRefundAttribute()
    {
        // 성공주문건 && 반품진행중이거나 반품이 완료된 건이 없는 주문상품만 환불가능
        return $this->order->state == OrderState::SUCCESS
            && $this->refunds()->where(function($query){
                $query->where("refunded", 1) // 반품완료
                    ->orWhereNull("refunded"); // 반품진행중
            })->count() === 0;
    }

    public function getCanReviewAttribute()
    {
        // 일단 주문했으면 리뷰쓰게 해놓고, 나중에 배송완료 후 쓸 수 있게하던 바꾸자
        return $this->review()->where("user_id", $this->order->user_id)->count() == 0;
    }

    public function checkDeliveryState()
    {
        /* CJ택배
        $response = Http::get("https://www.doortodoor.co.kr/parcel/doortodoor.do?fsp_action=PARC_ACT_002&fsp_cmd=retrieveInvNoACT&invc_no={$this->delivery_number}");

        if(str_contains($response->body(), "고객님의 상품이 배달완료 되었습니다."))
            $this->update(["state" => OutgoingState::DONE]);
        */

        //
        // 로젠택배
        $response = Http::get("https://www.ilogen.com/web/personal/trace/{$this->delivery_number}");

        if(str_contains($response->body(), "고객님께 물품을 전달하였습니다."))
            $this->update(["state" => OrderProductState::DONE]);
    }

    public function getDeliveryUrlAttribute()
    {
        if($this->delivery_number)
            return "https://www.ilogen.com/web/personal/trace/{$this->delivery_number}";

        return "";
    }

    public function review()
    {
        return $this->hasOne(Review::class);
    }

}
